npm
node.js
ejs
  - permite criar layouts
  - evita de repetir o mesmo codigo para TODAS AS paginas
git
mongoDB
moongose
MySQL

// COMMANDOS
Pacotes npm
npm init

npm i express ejs express-ejs-layouts
  express (servidor)
  ejs (template)
  express-ejs-layouts (permite criar um layout para os arquivos HTML)

npm i --save-dev nodemon
  -dev developer dependency
  nodemon permite que o sistema reinicialize toda vez que ocorrer mudança nos códigos

// ATUALIZAR package.json
  "main": "server.js"

  scripts:
    "start": "node server.js",
    "devStart": "nodemon server.js"

// CRIAR ARQUIVO server.js
const express = require('express')
const app = express()
const expressLayouts = require('express-ejs-layouts')

app.set('view engine', 'ejs')
app.set('views', __dirname + '/views')
app.set('layout', 'layouts/layout')
app.use(expressLayouts)
app.use(express.static('public'))

// CRIAR PASTAS
  views
  public

// COMANDO PARA INICIALIZAR SERVIDOR
npm run devStart

// CRIAR ROTAS
  criar pasta: routes
  criar index.js (views)
    const express = require('express')
    const router = express.Router()

    router.get('/', (req, res) => {
      res.send('funcionando')
    })

    module.exports = router
  
  adicionar server.js
    // VARIAVEIS DO SISTEMA
    const indexRouter = require('./routes/index')

    // Rotas
      app.use('/', indexRouter)

// CRIAR LAYOUTS
  criar pasta dentro de views: layouts
  criar layout.ejs
    !
    <%- body %>

// INTEGRAR BANCO DE DADOS
  mongoDB
    npm i mongoose

  adicionar server.js
    // CONFIGURACOES  
      const mongoose = require('mongoose')
      mongoose.connect(process.env.DATABASE_URL, { 
        useNewUrlParser: true,
        useUnifiedTopology: true})
      const db = mongoose.connection
      db.on('error', error => console.error(error))
      db.once('open', () => console.log('Connected to Mongoose'))

  variaveis de ambiente comando:
    npm i --save-dev dotenv

    criar .env
      DATABASE_URL=mongodb://localhost/database_name

// CRIAR MODELOS
  criar pasta: models


// GIT
  comando
    git init

  criar .gitignore
    .env
    node_modules

  git add -n .
  git add .

  se adicionar coisa errada
    git rm -r --cached .
  
  copiar do github da pasta desejada: git@github.com:marcioUfrj/tcc_marcio.git
    git remote add origin git@github.com:marcioUfrj/tcc_marcio.git

  git push -u origin main

// HEROKU
baixar e instalar heroku cli (se ainda n estiver instalado no pc)

If you haven't already, log in to your Heroku account and follow the prompts to create a new SSH public key.
$ heroku login

Initialize a git repository in a new or existing directory
$ heroku git:remote -a tccmarcio

If you want to deploy code to Heroku from a non-main branch of your local repository (for example, testbranch), use the following syntax to ensure it is pushed to the remote’s main branch:
$ git push heroku testbranchname:main

To reset/purge an app’s Heroku Git repository, use the heroku-repo CLI plugin:
heroku plugins:install heroku-repo
heroku repo:reset --app appname

//ATLAS mongoDB
connect
  create new user
    user
    senha aleatoria (copiar para n perder)
  
  choose a connection method
    connect your application
      COPY connection_string_only

colar connection_string_only na variavel de sistema no heroku
  alterar <password> para o pass gerado anteriormente

// BODY-PARSER
npm i body-parser
